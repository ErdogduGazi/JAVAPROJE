/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Ekranlar;

import Nesneler.Kitap;
import Operasyonlar.DatabaseIslemleri;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Şeyma
 */
public class KitapEkrani extends javax.swing.JFrame {

    //VeriTabanı bağlantısı kurma..
    DatabaseIslemleri dbIslemleri = new DatabaseIslemleri();
    //default table model değişkenini başlatma...
    DefaultTableModel model;

    public KitapEkrani() {
        initComponents();
        //Ekranı ortalama...
        setLocationRelativeTo(null);

        model = (DefaultTableModel) kitapTablosu.getModel();
        kitapGoruntule();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        yazarAdAlani = new javax.swing.JTextField();
        basimTarihiAlani = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        kitapTablosu = new javax.swing.JTable();
        kitapTürüAlani = new javax.swing.JTextField();
        kitapSilBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        kitapGüncelleBtn = new javax.swing.JButton();
        arama_input = new javax.swing.JTextField();
        kitapEkleBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        kitapAdAlani = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        yazarAdAlani.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yazarAdAlaniActionPerformed(evt);
            }
        });

        kitapTablosu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Kitap Adı", "Yazarı", "Basım Tarihi", "Türü"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        kitapTablosu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                kitapTablosuMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(kitapTablosu);
        if (kitapTablosu.getColumnModel().getColumnCount() > 0) {
            kitapTablosu.getColumnModel().getColumn(1).setResizable(false);
            kitapTablosu.getColumnModel().getColumn(2).setResizable(false);
            kitapTablosu.getColumnModel().getColumn(3).setResizable(false);
            kitapTablosu.getColumnModel().getColumn(4).setResizable(false);
        }

        kitapTürüAlani.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kitapTürüAlaniActionPerformed(evt);
            }
        });

        kitapSilBtn.setText("KİTAP SİL");
        kitapSilBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kitapSilBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("LİSTEDE ARA:");

        kitapGüncelleBtn.setText("KİTAP GÜNCELLE");
        kitapGüncelleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kitapGüncelleBtnActionPerformed(evt);
            }
        });

        arama_input.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                arama_inputKeyReleased(evt);
            }
        });

        kitapEkleBtn.setText("KİTAP EKLE");
        kitapEkleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kitapEkleBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Kitap Adı:");

        backBtn.setText("GERİ");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Yazar:");

        jLabel4.setText("Basım Tarihi:");

        jLabel5.setText("Kitap Türü:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backBtn)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(arama_input))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 557, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(kitapAdAlani)
                            .addComponent(yazarAdAlani)
                            .addComponent(basimTarihiAlani)
                            .addComponent(kitapTürüAlani, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(kitapSilBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(kitapEkleBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(kitapGüncelleBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(arama_input, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(kitapAdAlani, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kitapEkleBtn)
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(yazarAdAlani, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addComponent(kitapSilBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(basimTarihiAlani, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(kitapGüncelleBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(kitapTürüAlani, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(backBtn))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void kitapGoruntule() {
        //açılışta tabloyu sıfırlar
        model.setRowCount(0);
        //Kitap islemlerinden  KitapListesi döner Kitap referans tipini tutan listeyi al..
        ArrayList<Kitap> kitapList = dbIslemleri.kitaplariGetir();
        //uye list boş değilse yani liste varsa..
        if (kitapList != null) {

            for (Kitap kitap : kitapList) {
                //arayüz için object[] (array format) olması lazım for eachle tüm listeyi gez ve tüm özellikleri al.

                Object[] eklenecekler = {kitap.getId(), kitap.getKitapAdi(), kitap.getYazarAdi(), kitap.getBasımYili(), kitap.getTuru()};

                //arayüze ekle
                model.addRow(eklenecekler);
            }

        }

    }


    private void yazarAdAlaniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yazarAdAlaniActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_yazarAdAlaniActionPerformed

    private void kitapTablosuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_kitapTablosuMouseClicked
        //kitap tablosunda elemana tıklayınca textFieldları doldurmak...
        //getValueAt(satır,sütun) alır yani basılan satır ve 1-2-3-4. sütunlarını al ilgili yerlere yaz...
        int secilenSatir = kitapTablosu.getSelectedRow();

        kitapAdAlani.setText((String) kitapTablosu.getValueAt(secilenSatir, 1));
        yazarAdAlani.setText((String) kitapTablosu.getValueAt(secilenSatir, 2));
        basimTarihiAlani.setText(kitapTablosu.getValueAt(secilenSatir, 3).toString());
        kitapTürüAlani.setText((String) kitapTablosu.getValueAt(secilenSatir, 4));


    }//GEN-LAST:event_kitapTablosuMouseClicked

    private void kitapTürüAlaniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kitapTürüAlaniActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_kitapTürüAlaniActionPerformed

    private void kitapSilBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kitapSilBtnActionPerformed
        int secilmisSatir = kitapTablosu.getSelectedRow();
        //deger yoksa
        if (secilmisSatir == -1) {

            if (model.getRowCount() == 0) {
                //Tablo boştur
                JOptionPane.showMessageDialog(this, "Tablo Boş", "İşlem Başarısız", JOptionPane.PLAIN_MESSAGE);

            } else {
                // Değer seçilmemiştir...
                JOptionPane.showMessageDialog(this, "Lütfen Tablodan Değer Seçiniz", "İşlem Başarısız", JOptionPane.PLAIN_MESSAGE);

            }

        } else {
            //seçilmiş olduğu durum...

            //id'ye göre almak
            int id = (int) kitapTablosu.getValueAt(secilmisSatir, 0); //secilmis satırın 0. sütununu getir (satır,sütun)

            dbIslemleri.kitapSil(id);

            //güncel veriyi yazdır.
            this.kitapGoruntule();

            JOptionPane.showMessageDialog(this, "Üye Silindi.", "İşlem Başarılı", JOptionPane.PLAIN_MESSAGE);

        }
    }//GEN-LAST:event_kitapSilBtnActionPerformed

    private void kitapGüncelleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kitapGüncelleBtnActionPerformed

        int secilmisSatır = kitapTablosu.getSelectedRow();

        //Eğer satır seçilmemişse -1 döner.
        if (secilmisSatır == -1) {

            if (model.getRowCount() == 0) {
                //Tablo boştur
                JOptionPane.showMessageDialog(this, "Tablo Boş", "İşlem Başarısız", JOptionPane.PLAIN_MESSAGE);

            } else {
                //yada değer seçilmemiştir...
                JOptionPane.showMessageDialog(this, "Tablodan Bir Değer Seçiniz", "İşlem Başarısız", JOptionPane.PLAIN_MESSAGE);

            }

        } else {
            //seçilmiş olduğu durum...

            //id'sini al.
            String kitapAdi = kitapAdAlani.getText();
            String yazarAdi = yazarAdAlani.getText();
            int basimYili = Integer.parseInt(basimTarihiAlani.getText());
            String kitapTuru = kitapTürüAlani.getText();
            int id = (int) kitapTablosu.getValueAt(secilmisSatır, 0);

            dbIslemleri.kitapGuncelle(id, kitapAdi, yazarAdi, basimYili, kitapTuru);

            this.kitapGoruntule();

            JOptionPane.showMessageDialog(this, "Kitap Güncellendi.", "İşlem Başarılı", JOptionPane.PLAIN_MESSAGE);

        }


    }//GEN-LAST:event_kitapGüncelleBtnActionPerformed
    public void filtrelemeYap(String kelime) {
        //filtreleme işlemi
        TableRowSorter<DefaultTableModel> myTableRow = new TableRowSorter<DefaultTableModel>(model);
        kitapTablosu.setRowSorter(myTableRow);
        myTableRow.setRowFilter(RowFilter.regexFilter(kelime));

    }
    private void arama_inputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_arama_inputKeyReleased
        //kelimeyi al filtrele fonksiyonuna gönder
        String aranan = arama_input.getText();

        filtrelemeYap(aranan);

    }//GEN-LAST:event_arama_inputKeyReleased

    private void kitapEkleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kitapEkleBtnActionPerformed
      
       
 if(kitapAdAlani.getText().isEmpty()||yazarAdAlani.getText().isEmpty()||basimTarihiAlani.getText().isEmpty()||kitapTürüAlani.getText().isEmpty()){
//alanlardan en az biri boş
 JOptionPane.showMessageDialog(this, "Lütfen Tüm Alanları Doldurun.", "İşlem Başarısız", JOptionPane.PLAIN_MESSAGE);
}else{
//hepsi dolu
        String kitapAdi = kitapAdAlani.getText();
        String kitapYazari = yazarAdAlani.getText();
        int basımTarihi = Integer.valueOf(basimTarihiAlani.getText());
        String turu = kitapTürüAlani.getText();

        dbIslemleri.kitapEkle(kitapAdi, kitapYazari, basımTarihi, turu);

        this.kitapGoruntule();

        JOptionPane.showMessageDialog(this, "Yeni Kitap Eklendi", "İşlem Başarılı", JOptionPane.PLAIN_MESSAGE);
}


      


    }//GEN-LAST:event_kitapEkleBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        MenuEkrani anaMenu = new MenuEkrani();
        anaMenu.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KitapEkrani.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KitapEkrani.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KitapEkrani.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KitapEkrani.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KitapEkrani().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField arama_input;
    private javax.swing.JButton backBtn;
    private javax.swing.JTextField basimTarihiAlani;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField kitapAdAlani;
    private javax.swing.JButton kitapEkleBtn;
    private javax.swing.JButton kitapGüncelleBtn;
    private javax.swing.JButton kitapSilBtn;
    private javax.swing.JTable kitapTablosu;
    private javax.swing.JTextField kitapTürüAlani;
    private javax.swing.JTextField yazarAdAlani;
    // End of variables declaration//GEN-END:variables
}
